generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id     String  @id @default(cuid())
  email  String  @unique
  name   String
  phone  String?
  avatar String?

  hashedPassword String?
  googleId       String? @unique
  githubId       String? @unique

  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  lastLoginAt   DateTime?

  refreshTokenHash      String?
  refreshTokenExpiresAt DateTime?

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userRoles             UserRole[]
  createdActivities     FarmActivity[]         @relation("ActivityCreatedBy")
  activityAssignments   ActivityAssignment[]   @relation("ActivityAssignments")
  assignedActivities    ActivityAssignment[]   @relation("ActivityAssignedBy")
  activityCostsCreated  ActivityCost[]         @relation("ActivityCostCreatedBy")
  activityCostsUpdated  ActivityCost[]         @relation("ActivityCostUpdatedBy")
  activityProgressLogs  ActivityProgressLog[]  @relation("ActivityProgressLogs")
  activityNotes         ActivityNote[]         @relation("ActivityNotes")
  observations          Observation[]
  createdOrders         Order[]                @relation("OrderCreatedBy")
  messages              Message[]
  activities            Activity[]
  intelligenceResponses IntelligenceResponse[]
  farmAnalyses          FarmAnalysis[]
  marketAnalyses        MarketAnalysis[]
  activityOptimizations ActivityOptimization[]
  emailVerifications    EmailVerification[]
  priceAlerts           PriceAlert[]

  @@index([organizationId])
  @@index([email])
  @@map("users")
}

model EmailVerification {
  id          String    @id @default(cuid())
  token       String    @unique
  tokenHash   String    @unique
  userId      String
  email       String
  expiresAt   DateTime
  requestedAt DateTime  @default(now())
  isUsed      Boolean   @default(false)
  usedAt      DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tokenHash])
  @@index([expiresAt])
  @@map("email_verifications")
}

model Role {
  id          String  @id @default(cuid())
  name        String
  description String?

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  level           Int       @default(0)
  isActive        Boolean   @default(true)
  isSystemRole    Boolean   @default(false)
  isPlatformAdmin Boolean   @default(false)
  scope           RoleScope @default(ORGANIZATION)

  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions RolePermission[]
  userRoles   UserRole[]

  @@unique([name, organizationId])
  @@index([organizationId])
  @@index([isPlatformAdmin])
  @@index([scope])
  @@map("roles")
}

model Permission {
  id          String  @id @default(cuid())
  resource    String
  action      String
  conditions  Json?
  description String?

  isSystemPermission Boolean  @default(false)
  createdAt          DateTime @default(now())

  rolePermissions RolePermission[]

  @@unique([resource, action])
  @@index([resource])
  @@map("permissions")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  granted    Boolean  @default(true)
  conditions Json?
  createdAt  DateTime @default(now())

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String

  farmId     String?
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  assignedBy String?
  assignedAt DateTime  @default(now())
  metadata   Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId, farmId])
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

model Organization {
  id          String           @id @default(cuid())
  name        String
  type        OrganizationType
  email       String?
  phone       String?
  address     Json?
  taxId       String?
  website     String?
  description String?
  logo        String?
  isVerified  Boolean          @default(false)
  isActive    Boolean          @default(true)

  plan             String   @default("basic")
  maxUsers         Int      @default(5)
  maxFarms         Int      @default(1)
  features         String[]
  allowedModules   String[] @default([])
  featureFlags     Json?
  allowCustomRoles Boolean  @default(false)
  currency         Currency @default(NGN)

  suspendedAt      DateTime?
  suspensionReason String?
  verifiedAt       DateTime?
  verifiedBy       String?

  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users             User[]
  roles             Role[]
  farms             Farm[]
  inventory         Inventory[]
  transactions      Transaction[]
  buyerOrders       Order[]              @relation("BuyerOrganization")
  supplierOrders    Order[]              @relation("SupplierOrganization")
  drivers           Driver[]
  ratings           Rating[]             @relation("RatingGiven")
  ratingsReceived   Rating[]             @relation("RatingReceived")
  activityTemplates ActivityTemplate[]
  listings          MarketplaceListing[]
  subscription      Subscription?
  paymentMethods    PaymentMethod[]

  @@index([type])
  @@index([isActive, suspendedAt])
  @@index([currency])
  @@map("organizations")
}

enum OrganizationType {
  FARM_OPERATION
  COMMODITY_TRADER
  LOGISTICS_PROVIDER
  INTEGRATED_FARM
}

model Farm {
  id             String  @id @default(cuid())
  organizationId String
  name           String
  totalArea      Float
  location       Json?
  timezone       String  @default("UTC")
  isActive       Boolean @default(true)

  cropTypes       String[]
  establishedDate DateTime
  certifications  String[]
  isPublic        Boolean  @default(false)

  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization          Organization           @relation(fields: [organizationId], references: [id])
  areas                 Area[]
  seasons               Season[]
  activities            FarmActivity[]
  observations          Observation[]
  inventory             Inventory[]
  sensors               Sensor[]
  commodities           Commodity[]            @relation("FarmCommodities")
  orders                Order[]                @relation("FarmOrders")
  intelligenceResponses IntelligenceResponse[]
  farmAnalyses          FarmAnalysis[]
  activityOptimizations ActivityOptimization[]

  @@index([organizationId])
  @@index([organizationId, isActive])
  @@map("farms")
}

model Area {
  id         String   @id @default(cuid())
  farmId     String
  name       String
  size       Float
  boundaries Json?
  isActive   Boolean  @default(true)
  metadata   Json?
  createdAt  DateTime @default(now())

  farm         Farm           @relation(fields: [farmId], references: [id], onDelete: Cascade)
  cropCycles   CropCycle[]
  activities   FarmActivity[]
  observations Observation[]
  soilData     SoilData[]

  @@index([farmId])
  @@map("areas")
}

model Season {
  id        String    @id @default(cuid())
  farmId    String
  name      String
  year      Int
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean   @default(true)
  metadata  Json?
  createdAt DateTime  @default(now())

  farm       Farm        @relation(fields: [farmId], references: [id], onDelete: Cascade)
  cropCycles CropCycle[]

  @@unique([farmId, name, year])
  @@index([farmId])
  @@map("seasons")
}

model Commodity {
  id              String    @id @default(cuid())
  name            String
  category        String
  variety         String?
  qualityGrade    String?
  quantity        Float
  unit            String
  harvestDate     DateTime?
  storageLocation String?
  description     String?
  metadata        Json?
  isActive        Boolean   @default(true)
  isGlobal        Boolean   @default(true)
  createdBy       String?

  farmId String?
  farm   Farm?   @relation("FarmCommodities", fields: [farmId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cropCycles  CropCycle[]
  orderItems  OrderItem[]
  inventory   Inventory[]
  priceAlerts PriceAlert[]

  @@index([isGlobal, createdBy])
  @@index([farmId])
  @@map("commodities")
}

model CropCycle {
  id            String     @id @default(cuid())
  farmId        String
  seasonId      String
  areaId        String
  commodityId   String
  plantingDate  DateTime
  harvestDate   DateTime?
  plantedArea   Float
  status        CropStatus
  expectedYield Float?
  actualYield   Float?
  metadata      Json?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  season     Season         @relation(fields: [seasonId], references: [id])
  area       Area           @relation(fields: [areaId], references: [id])
  commodity  Commodity      @relation(fields: [commodityId], references: [id])
  activities FarmActivity[]
  harvests   Harvest[]

  @@index([farmId])
  @@index([farmId, status])
  @@map("crop_cycles")
}

model FarmActivity {
  id                String           @id @default(cuid())
  farmId            String
  areaId            String?
  cropCycleId       String?
  type              ActivityType
  name              String
  description       String?
  scheduledAt       DateTime?
  completedAt       DateTime?
  startedAt         DateTime?
  status            ActivityStatus   @default(PLANNED)
  priority          ActivityPriority @default(NORMAL)
  cost              Float? // Total cost calculated from cost entries
  estimatedDuration Int? // in minutes
  actualDuration    Int? // in minutes
  createdById       String
  metadata          Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  farm         Farm                  @relation(fields: [farmId], references: [id], onDelete: Cascade)
  area         Area?                 @relation(fields: [areaId], references: [id])
  cropCycle    CropCycle?            @relation(fields: [cropCycleId], references: [id])
  createdBy    User                  @relation("ActivityCreatedBy", fields: [createdById], references: [id])
  media        Media[]
  assignments  ActivityAssignment[]
  costs        ActivityCost[]
  progressLogs ActivityProgressLog[]
  notes        ActivityNote[]

  @@index([farmId, status])
  @@index([farmId, type])
  @@index([createdById])
  @@index([farmId, priority])
  @@index([status, scheduledAt])
  @@index([farmId, scheduledAt])
  @@index([createdById, status])
  @@map("farm_activities")
}

model ActivityAssignment {
  id           String       @id @default(cuid())
  activityId   String
  userId       String
  role         ActivityRole @default(ASSIGNED)
  assignedAt   DateTime     @default(now())
  assignedById String
  isActive     Boolean      @default(true)
  metadata     Json?

  activity   FarmActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User         @relation("ActivityAssignments", fields: [userId], references: [id])
  assignedBy User         @relation("ActivityAssignedBy", fields: [assignedById], references: [id])

  @@unique([activityId, userId])
  @@index([activityId])
  @@index([userId])
  @@index([userId, isActive]) // For getUserActivities queries
  @@index([activityId, isActive]) // For activity assignment lookups
  @@map("activity_assignments")
}

model ActivityCost {
  id          String   @id @default(cuid())
  activityId  String
  type        CostType
  description String
  amount      Decimal  @db.Decimal(10, 2)
  quantity    Decimal? @db.Decimal(8, 2)
  unit        String?
  receipt     String?
  vendor      String?
  createdAt   DateTime @default(now())
  createdById String
  updatedAt   DateTime @default(now()) @updatedAt
  updatedById String?

  activity  FarmActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  createdBy User         @relation("ActivityCostCreatedBy", fields: [createdById], references: [id])
  updatedBy User?        @relation("ActivityCostUpdatedBy", fields: [updatedById], references: [id])

  @@index([activityId])
  @@index([type])
  @@index([createdById])
  @@map("activity_costs")
}

model ActivityProgressLog {
  id              String   @id @default(cuid())
  activityId      String
  userId          String
  percentComplete Int // 0-100
  notes           String?
  issues          String?
  location        Json?
  timestamp       DateTime @default(now())
  metadata        Json?

  activity FarmActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user     User         @relation("ActivityProgressLogs", fields: [userId], references: [id])

  @@index([activityId])
  @@index([timestamp])
  @@map("activity_progress_logs")
}

model ActivityNote {
  id          String           @id @default(cuid())
  activityId  String
  userId      String
  content     String
  type        ActivityNoteType @default(GENERAL)
  isPrivate   Boolean          @default(false)
  attachments String[] // Array of media file IDs
  metadata    Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  activity FarmActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user     User         @relation("ActivityNotes", fields: [userId], references: [id])

  @@index([activityId])
  @@index([userId])
  @@index([activityId, createdAt])
  @@map("activity_notes")
}

model ActivityTemplate {
  id              String   @id @default(cuid())
  name            String
  type            String
  description     String
  defaultDuration Int
  instructions    String
  safetyNotes     String
  applicableCrops String[]
  isSystem        Boolean  @default(false)
  organizationId  String?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([type])
  @@index([isSystem])
  @@map("activity_templates")
}

model Harvest {
  id          String   @id @default(cuid())
  cropCycleId String
  harvestDate DateTime
  quantity    Float
  quality     String?
  cost        Float?
  metadata    Json?
  createdAt   DateTime @default(now())

  cropCycle CropCycle   @relation(fields: [cropCycleId], references: [id], onDelete: Cascade)
  inventory Inventory[]

  @@index([cropCycleId])
  @@map("harvests")
}

model Inventory {
  id             String          @id @default(cuid())
  organizationId String
  farmId         String?
  commodityId    String
  harvestId      String?
  quantity       Float
  unit           String
  quality        String?
  location       String?
  status         InventoryStatus @default(AVAILABLE)
  currency       Currency        @default(NGN)
  metadata       Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  organization Organization         @relation(fields: [organizationId], references: [id])
  farm         Farm?                @relation(fields: [farmId], references: [id])
  commodity    Commodity            @relation(fields: [commodityId], references: [id])
  harvest      Harvest?             @relation(fields: [harvestId], references: [id])
  orderItems   OrderItem[]
  listings     MarketplaceListing[]

  @@index([organizationId, status])
  @@index([farmId])
  @@index([organizationId, commodityId])
  @@map("inventory")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  title       String
  type        OrderType
  status      OrderStatus @default(PENDING)

  commodityId      String
  quantity         Float
  pricePerUnit     Float
  totalPrice       Float
  deliveryDate     DateTime
  deliveryLocation String
  terms            Json?

  totalAmount Decimal?
  currency    Currency @default(NGN)

  buyerOrgId    String
  supplierOrgId String?
  createdById   String
  farmId        String?

  deliveryAddress Json?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  farm         Farm?         @relation("FarmOrders", fields: [farmId], references: [id])
  buyerOrg     Organization  @relation("BuyerOrganization", fields: [buyerOrgId], references: [id])
  supplierOrg  Organization? @relation("SupplierOrganization", fields: [supplierOrgId], references: [id])
  createdBy    User          @relation("OrderCreatedBy", fields: [createdById], references: [id])
  items        OrderItem[]
  deliveries   Delivery[]
  transactions Transaction[]
  messages     Message[]
  documents    Document[]

  @@index([buyerOrgId, status])
  @@index([supplierOrgId, status])
  @@index([status, createdAt])
  @@index([farmId])
  @@index([commodityId])
  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  commodityId String
  inventoryId String?
  quantity    Decimal
  unitPrice   Decimal?
  metadata    Json?
  createdAt   DateTime @default(now())

  order     Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  commodity Commodity  @relation(fields: [commodityId], references: [id])
  inventory Inventory? @relation(fields: [inventoryId], references: [id])

  @@index([orderId])
  @@map("order_items")
}

model Delivery {
  id              String         @id @default(cuid())
  orderId         String
  deliveryNumber  String         @unique
  status          DeliveryStatus
  scheduledDate   DateTime?
  actualDate      DateTime?
  driverId        String?
  currentLocation Json?
  deliveryProof   Json?
  metadata        Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  order    Order            @relation(fields: [orderId], references: [id])
  driver   Driver?          @relation(fields: [driverId], references: [id])
  tracking TrackingUpdate[]

  @@index([orderId])
  @@index([driverId, status])
  @@map("deliveries")
}

model Driver {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  phone          String
  licenseNumber  String
  isActive       Boolean  @default(true)
  rating         Float?
  metadata       Json?
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id])
  deliveries   Delivery[]

  @@index([organizationId, isActive])
  @@map("drivers")
}

model TrackingUpdate {
  id         String   @id @default(cuid())
  deliveryId String
  location   Json?
  status     String
  notes      String?
  timestamp  DateTime @default(now())

  delivery Delivery @relation(fields: [deliveryId], references: [id])

  @@index([deliveryId, timestamp])
  @@map("tracking_updates")
}

model Transaction {
  id             String            @id @default(cuid())
  organizationId String
  orderId        String?
  farmId         String?
  type           TransactionType
  amount         Decimal
  currency       Currency          @default(NGN)
  status         TransactionStatus
  description    String
  reference      String?
  dueDate        DateTime?
  paidDate       DateTime?
  metadata       Json?
  createdAt      DateTime          @default(now())

  organization Organization @relation(fields: [organizationId], references: [id])
  order        Order?       @relation(fields: [orderId], references: [id])

  @@index([organizationId, status])
  @@index([organizationId, type])
  @@map("transactions")
}

model SoilData {
  id         String   @id @default(cuid())
  areaId     String
  sampleDate DateTime
  results    Json
  metadata   Json?
  createdAt  DateTime @default(now())

  area Area @relation(fields: [areaId], references: [id], onDelete: Cascade)

  @@index([areaId, sampleDate])
  @@map("soil_data")
}

model Sensor {
  id          String    @id @default(cuid())
  farmId      String
  name        String
  sensorType  String
  location    Json
  isActive    Boolean   @default(true)
  metadata    Json?
  lastReading DateTime?
  createdAt   DateTime  @default(now())

  farm     Farm            @relation(fields: [farmId], references: [id], onDelete: Cascade)
  readings SensorReading[]

  @@index([farmId, isActive])
  @@index([farmId, sensorType])
  @@map("sensors")
}

model SensorReading {
  id        String   @id @default(cuid())
  sensorId  String
  timestamp DateTime
  data      Json
  quality   String   @default("GOOD")

  sensor Sensor @relation(fields: [sensorId], references: [id], onDelete: Cascade)

  @@unique([sensorId, timestamp])
  @@index([sensorId, timestamp])
  @@map("sensor_readings")
}

model Observation {
  id          String   @id @default(cuid())
  farmId      String
  areaId      String?
  userId      String
  type        String
  title       String
  description String
  severity    String?
  location    Json?
  observedAt  DateTime
  isResolved  Boolean  @default(false)
  metadata    Json?
  createdAt   DateTime @default(now())

  farm  Farm    @relation(fields: [farmId], references: [id])
  user  User    @relation(fields: [userId], references: [id])
  area  Area?   @relation(fields: [areaId], references: [id])
  media Media[]

  @@index([farmId, isResolved])
  @@index([userId, farmId])
  @@map("observations")
}

model Media {
  id             String   @id @default(cuid())
  farmActivityId String?
  observationId  String?
  orderId        String?
  filename       String
  url            String
  mimeType       String
  size           Int
  metadata       Json?
  uploadedAt     DateTime @default(now())

  farmActivity FarmActivity? @relation(fields: [farmActivityId], references: [id])
  observation  Observation?  @relation(fields: [observationId], references: [id])

  @@index([farmActivityId])
  @@index([observationId])
  @@index([orderId])
  @@map("media")
}

model Rating {
  id        String   @id @default(cuid())
  fromOrgId String
  toOrgId   String
  orderId   String?
  type      String
  score     Int
  comment   String?
  metadata  Json?
  createdAt DateTime @default(now())

  fromOrg Organization @relation("RatingGiven", fields: [fromOrgId], references: [id])
  toOrg   Organization @relation("RatingReceived", fields: [toOrgId], references: [id])

  @@index([fromOrgId])
  @@index([toOrgId])
  @@index([orderId])
  @@map("ratings")
}

model Message {
  id        String    @id @default(cuid())
  orderId   String?
  farmId    String?
  userId    String
  content   String
  type      String    @default("GENERAL")
  isRead    Boolean   @default(false)
  readAt    DateTime?
  metadata  Json?
  createdAt DateTime  @default(now())

  order Order? @relation(fields: [orderId], references: [id])
  user  User   @relation(fields: [userId], references: [id])

  @@index([orderId, createdAt])
  @@index([farmId, createdAt])
  @@index([userId])
  @@map("messages")
}

model Document {
  id        String   @id @default(cuid())
  orderId   String?
  farmId    String?
  name      String
  type      String
  url       String
  size      Int?
  metadata  Json?
  createdAt DateTime @default(now())

  order Order? @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([farmId])
  @@map("documents")
}

model Activity {
  id             String   @id @default(cuid())
  userId         String?
  organizationId String?
  action         String
  entity         String
  entityId       String
  changes        Json?
  metadata       Json?
  timestamp      DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([organizationId, timestamp])
  @@index([userId, timestamp])
  @@index([entity, entityId])
  @@map("activities")
}

model Setting {
  key       String   @id
  value     String
  type      String   @default("string")
  scope     String   @default("global")
  scopeId   String?
  updatedAt DateTime @updatedAt

  @@index([scope, scopeId])
  @@map("settings")
}

model IntelligenceResponse {
  id        String   @id @default(cuid())
  content   String
  model     String
  usage     Json // { promptTokens, completionTokens, totalTokens }
  userId    String
  farmId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  farm Farm? @relation(fields: [farmId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([farmId])
  @@index([createdAt])
  @@map("intelligence_responses")
}

model FarmAnalysis {
  id              String   @id @default(cuid())
  farmId          String
  analysisType    String
  insights        String[] // Array of insights
  recommendations String[] // Array of recommendations
  confidence      Float // 0-1 confidence score
  data            Json // Analysis results data
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([farmId])
  @@index([userId])
  @@index([analysisType])
  @@index([createdAt])
  @@map("farm_analyses")
}

model MarketAnalysis {
  id              String   @id @default(cuid())
  commodity       String
  region          String?
  analysisType    String
  predictions     Json // Array of predictions with dates and values
  insights        String[] // Array of insights
  recommendations String[] // Array of recommendations
  riskFactors     String[] // Array of risk factors
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([commodity])
  @@index([region])
  @@index([analysisType])
  @@index([userId])
  @@index([createdAt])
  @@map("market_analyses")
}

model ActivityOptimization {
  id            String   @id @default(cuid())
  farmId        String
  activityType  String
  optimizedPlan Json // Optimized plan with schedule, costs, etc.
  alternatives  Json // Alternative approaches
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([farmId])
  @@index([userId])
  @@index([activityType])
  @@index([createdAt])
  @@map("activity_optimizations")
}

model MarketplaceListing {
  id              String           @id @default(cuid())
  organizationId  String
  inventoryId     String
  title           String
  description     String?
  quantity        Float
  unitPrice       Float
  priceType       ListingPriceType @default(FIXED)
  minQuantity     Float?
  qualityGrade    String?
  certifications  String[]
  availableFrom   DateTime
  availableUntil  DateTime
  deliveryOptions String[]
  deliveryRadius  Int?
  paymentTerms    String[]
  isPublic        Boolean          @default(true)
  images          String[]
  status          ListingStatus    @default(ACTIVE)
  currency        Currency         @default(NGN)
  views           Int              @default(0)
  inquiries       Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inventory    Inventory    @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([inventoryId])
  @@index([status])
  @@index([availableUntil])
  @@map("marketplace_listings")
}

model PriceAlert {
  id            String              @id @default(cuid())
  userId        String
  commodityId   String?
  commodityName String
  targetPrice   Float
  condition     PriceAlertCondition
  region        String?
  isActive      Boolean             @default(true)
  lastTriggered DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  commodity Commodity? @relation(fields: [commodityId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([commodityId])
  @@index([isActive])
  @@map("price_alerts")
}

// =============================================================================
// Billing Models
// =============================================================================

model SubscriptionPlan {
  id          String           @id @default(cuid())
  name        String           @unique
  tier        SubscriptionTier
  description String?

  // Pricing
  priceUSD        Decimal         @db.Decimal(10, 2)
  priceNGN        Decimal         @db.Decimal(10, 2)
  billingInterval BillingInterval @default(MONTHLY)

  // Feature Limits
  maxUsers              Int @default(-1)
  maxFarms              Int @default(-1)
  maxActivitiesPerMonth Int @default(-1)
  maxActiveListings     Int @default(-1)
  storageGB             Int @default(1)
  apiCallsPerDay        Int @default(100)

  // Feature Flags
  hasAdvancedAnalytics Boolean @default(false)
  hasAIInsights        Boolean @default(false)
  hasAPIAccess         Boolean @default(false)
  hasCustomRoles       Boolean @default(false)
  hasPrioritySupport   Boolean @default(false)
  hasWhiteLabel        Boolean @default(false)

  features Json?
  isActive Boolean @default(true)
  isPublic Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]

  @@index([tier])
  @@index([isActive, isPublic])
  @@map("subscription_plans")
}

model Subscription {
  id             String @id @default(cuid())
  organizationId String @unique
  planId         String

  status   SubscriptionStatus @default(ACTIVE)
  currency Currency

  // Billing
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  billingInterval    BillingInterval @default(MONTHLY)

  // Trial
  trialStart DateTime?
  trialEnd   DateTime?
  isTrialing Boolean   @default(false)

  // Payment
  autoRenew       Boolean @default(true)
  paymentMethodId String?

  // Cancellation
  cancelAtPeriodEnd Boolean   @default(false)
  canceledAt        DateTime?
  cancelReason      String?

  // External References
  stripeCustomerId         String? @unique
  stripeSubscriptionId     String? @unique
  paystackCustomerCode     String? @unique
  paystackSubscriptionCode String? @unique

  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization  Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan          SubscriptionPlan @relation(fields: [planId], references: [id])
  paymentMethod PaymentMethod?   @relation(fields: [paymentMethodId], references: [id])
  invoices      Invoice[]
  usageRecords  UsageRecord[]

  @@index([organizationId])
  @@index([planId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@index([stripeCustomerId])
  @@index([paystackCustomerCode])
  @@map("subscriptions")
}

model Invoice {
  id             String @id @default(cuid())
  subscriptionId String
  invoiceNumber  String @unique

  status InvoiceStatus @default(DRAFT)

  // Amounts
  subtotal   Decimal  @db.Decimal(10, 2)
  tax        Decimal  @default(0) @db.Decimal(10, 2)
  total      Decimal  @db.Decimal(10, 2)
  amountPaid Decimal  @default(0) @db.Decimal(10, 2)
  amountDue  Decimal  @db.Decimal(10, 2)
  currency   Currency

  // Dates
  issuedAt DateTime  @default(now())
  dueDate  DateTime
  paidAt   DateTime?

  // Payment
  paymentIntentId String?
  paymentMethod   String?

  // Line Items
  lineItems Json // Array of invoice line items

  // PDF
  pdfUrl String?

  // External References
  stripeInvoiceId     String? @unique
  paystackInvoiceCode String? @unique

  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  payments     Payment[]

  @@index([subscriptionId])
  @@index([status])
  @@index([dueDate])
  @@index([invoiceNumber])
  @@map("invoices")
}

model PaymentMethod {
  id             String @id @default(cuid())
  organizationId String

  type     PaymentMethodType
  provider PaymentProvider

  // Card Details (tokenized)
  cardLast4    String?
  cardBrand    String?
  cardExpMonth Int?
  cardExpYear  Int?

  // Bank Account
  bankName     String?
  accountLast4 String?

  isDefault Boolean @default(false)

  // External References
  stripePaymentMethodId     String? @unique
  paystackAuthorizationCode String? @unique

  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization  Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  subscriptions Subscription[]
  payments      Payment[]

  @@index([organizationId])
  @@index([isDefault])
  @@map("payment_methods")
}

model Payment {
  id              String  @id @default(cuid())
  invoiceId       String
  paymentMethodId String?

  amount   Decimal       @db.Decimal(10, 2)
  currency Currency
  status   PaymentStatus

  provider PaymentProvider

  // External References
  stripePaymentIntentId String? @unique
  paystackReference     String? @unique

  failureReason String?
  receiptUrl    String?

  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invoice       Invoice        @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])

  @@index([invoiceId])
  @@index([status])
  @@index([createdAt])
  @@map("payments")
}

model UsageRecord {
  id             String @id @default(cuid())
  subscriptionId String

  featureName String
  quantity    Int
  unit        String?

  recordedAt  DateTime @default(now())
  periodStart DateTime
  periodEnd   DateTime

  metadata Json?

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId, featureName])
  @@index([recordedAt])
  @@index([periodStart, periodEnd])
  @@map("usage_records")
}

enum CropStatus {
  PLANNED
  PLANTED
  GROWING
  MATURE
  HARVESTED
  COMPLETED
}

enum ActivityType {
  LAND_PREP
  PLANTING
  FERTILIZING
  IRRIGATION
  PEST_CONTROL
  HARVESTING
  MAINTENANCE
  MONITORING
  OTHER
}

enum ActivityStatus {
  PLANNED
  IN_PROGRESS
  PAUSED
  COMPLETED
  CANCELLED
}

enum InventoryStatus {
  AVAILABLE
  RESERVED
  SOLD
  CONSUMED
  EXPIRED
}

enum OrderType {
  BUY
  SELL
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  SCHEDULED
  IN_TRANSIT
  DELIVERED
  FAILED
  CANCELLED
}

enum TransactionType {
  FARM_EXPENSE
  FARM_REVENUE
  ORDER_PAYMENT
  PLATFORM_FEE
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum ActivityPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ActivityRole {
  ASSIGNED
  SUPERVISOR
  OBSERVER
}

enum ActivityNoteType {
  OBSERVATION
  ISSUE
  RECOMMENDATION
  GENERAL
}

enum CostType {
  LABOR
  EQUIPMENT
  MATERIAL
  FUEL
  OTHER
}

enum RoleScope {
  PLATFORM
  ORGANIZATION
  FARM
}

enum ListingStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  SOLD
}

enum ListingPriceType {
  FIXED
  NEGOTIABLE
  AUCTION
}

enum PriceAlertCondition {
  ABOVE
  BELOW
  EQUAL
}

// =============================================================================
// Billing Enums
// =============================================================================

enum SubscriptionTier {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  PAUSED
  INCOMPLETE
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

enum Currency {
  USD
  NGN
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

enum PaymentMethodType {
  CARD
  BANK_ACCOUNT
  MOBILE_MONEY
}

enum PaymentProvider {
  STRIPE
  PAYSTACK
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
}
